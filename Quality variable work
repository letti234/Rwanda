/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #98ff00 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[28.364809275063447, -0.893750338517721],
          [28.364809275063447, -3.17731309885111],
          [31.309145212563447, -3.17731309885111],
          [31.309145212563447, -0.893750338517721]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

//Open MODIS data and clip to geometry

var data = ee.ImageCollection('MODIS/006/MOD44B')
.map(function(image){return image.clip(geometry)});

print(data, "MODIS image clipped to Rwanda bounding box");

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//Quality variable
//
////////////////////////////////////////////////////////////////////////////////////////////////////////

//Quality is stored in 8 "bits" for each pixel, but the value is reported as numeric. Each numeric
//value from 0 to 255 is a combination of eight binary indicators.

//We can transform the numeric value into 8 bits (an 8-number sequence of 0's and 1's) and then count the number
//of 1's. Each 1 is a flag for bad data quality.

//MODIS states any quality binary value with 2 or more 1's is potentially "bad"
//See https://lpdaac.usgs.gov/documents/459/MOD44B_User_Guide_V5.pdf

//Subset data
var quality00 = data.filter(ee.Filter.date('2000-01-01', '2000-12-31'))
.select("Quality").toBands();


print(quality00, "Image quality assessment 2000");

//Note that this map isn't helpful since  the values cannot be interpreted on a continuous scale. 
//For example, high values represent 1's in the 6th-8th bit.

//Map.addLayer(quality00,  {min: 0, max: 255, palette: ['white', 'red']}, "Raw image quality indicators");


/////////////////////////////////////////////////////////////////////////////////////////////////
//
// Mapping "bad" pixels: >2 1's. From user blog - https://spatialthoughts.com/2021/08/19/qa-bands-bitmasks-gee/
//
////////////////////////////////////////////////////////////////////////////////////////////////
//Probably more accurate than the ChatGPT version. I still want a map with the counts of 1's across
//the 8-bit object.


// Helper function to extract the values from specific bits

var bitwiseExtract = function(input, fromBit, toBit) {
  var maskSize = ee.Number(1).add(toBit).subtract(fromBit);
  var mask = ee.Number(1).leftShift(maskSize).subtract(1);
  return input.rightShift(fromBit).bitwiseAnd(mask);
};


var qualMask00 = bitwiseExtract(quality00, 0, 7).lte(1);
print(qualMask00, "0-1 indicator for whether there are 2 or more quality flags");

Map.addLayer(qualMask00, {min: 0, max: 1, palette: ['white', 'red']} , "Good pixel classification");


//This is certainly a more stringent criteria. But it doesn't seem responsive to the set criteria.
//Change .lte(1) to .lte(8) and the map is pretty much the same.

//GEE suggestions

var count00 = quality00.bitCount();

Map.addLayer(count00, {}, "Count of number of 1's in 8-character bit")

Export.image.toDrive({
  image: count00,
  scale: 250,
  description: '2000_QualCount',
  fileFormat: 'GEOTIFF',
  folder: "Cookstove_exports",
  maxPixels: 9e10
});




